#-----------------------------------------------------------------------------
# Name: sdfScore_multiproc.py
# Author: Yolanda
# Instruction: Re-score the binding poses generated by Glide. Multi-processing
#     version.
#------------------------------------------------------------------------------

import dist
import pmf_atom_typer as pat
import raw_print_dist as rpd
import resiDescriptorGen_Scaled_LE as rdg
import extract_pdb1 as ep
from pybel import *
import os
from math import exp 
import multiprocessing as mul

sdf = 'e:/brd4/PMF_Yolanda/dataSet/version2/ActiveFound.sdf'
pr = '4GPJ_confPred.pdb'

expdir = 'e:/brd4/PMF_Yolanda/dataSet/version2/ActiveFound_BRD4LGR1.txt'
expsdf = sdf[:-4]+'_BRD4LGR1.sdf'
dc_fn = 'dist_scPDB_train_4.dat'
modelfile = './model_151210.txt'
scalerFit = 'dscrptorValueLE_train.txt'

E = exp(1.0)
DESCRIPTOR = rdg.DESCRIPTOR


def loadModel(modelfile):
    rawPara = [float(l.strip().split()[1]) for l in open(modelfile)]
    rawDES = [l.strip().split()[0] for l in open(modelfile)]
    para = rawPara[:-1]
    descriptor = rawDES[:-1]
    intercept = rawPara[-1]
    return descriptor, para, intercept

def brd4_lgr(dd, model):
    descriptor, para, intercept = model
    t = sum([dd[a]*b for a,b in zip(descriptor, para)])+intercept
    return 1 - 1/(1+E**t)


def singleRun(paraWrap):
    ligString, proString, pts, model, scaler = paraWrap
    pocString = ep.Extract(proString, ligString)
    poc = readstring('pdb', pocString)
    mol = readstring('sdf', ligString)
    dd = rdg.GetDscrptor(mol, poc, pts)
    dd = rdg.scaleDES_fromDict(scaler, dd)
    print [dd[d] for d in DESCRIPTOR[:5]]
    brd4LgrScore = brd4_lgr(dd,model)
    mol.data['BRD4LGR_pred'] = str(brd4LgrScore)
    entry = [mol.title]+[str(dd[d]) for d in DESCRIPTOR]+[str(brd4LgrScore)]
    return entry, mol.write('sdf')


def molGen(sdf, proString, pts, model, scaler):
    with open(sdf) as sdfile:
        molString = ''
        for line in sdfile:
            molString += line
            if line.strip() == '$$$$':
                yield (molString, proString, pts, model, scaler)
                molString = ''



if __name__ == '__main__':
    proString = open(pr).read()
    pts = dist.PTS(dist.UnformatedInput(dc_fn))
    model = loadModel(modelfile)

    f, fsdout = open(expdir, 'w'), open(expsdf, 'w')
    f.write('\t'.join(['Name']+DESCRIPTOR+['Prob'])+'\n')

    poo = mul.Pool(2)
    import time
    t = time.time()
    scaler = rdg.getScaler_fromFile(scalerFit)
    for n,v in enumerate(poo.imap(singleRun, molGen(sdf,proString,pts,model,scaler))):
        entry, molString = v
        f.write('\t'.join(entry)+'\n')
        fsdout.write(molString)
        if n%100==0: print n, molString[:15], entry[-1], time.time()-t
    print time.time()-t

    f.close()
    fsdout.close()
    poo.close()
    
